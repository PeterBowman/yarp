/**
\defgroup dev_all Devices

In YARP, a Device is a software abstraction of a hardware or logical component,
which provides a standardized interface to access specific functionalities within
the middleware. 
Devices can abstract everything: motor controllers, sensors, cameras, simulated components
and even algorithms.

A device ideally should use the minimal set of \link dev_iface interfaces\endlink
needed to \link dev_impl implement \endlink a particular task.

\image html device.png ""

In Yarp, devices are implemented as \link dev_impl plugins \endlink, meaning that 
they are not a stand-alone executables: they require an external wrapper to be executed.
More in particular, they can be started from the <b>commandline</b>,
via <b>yarprobotinterface</b> or from a <b>programming language</b> (c++, python, etc.).

## Running a Device via command line

Devices that can be created and configured from the
command-line tool \link yarpdev yarpdev\endlink by 
specifying a `--device` option followed by their name, for example:

\verbatim
yarpdev --device fakeFrameGrabber
\endverbatim

This creates a `fakeFrameGrabber` device with default options.
Additional configuration options can be added as optional parameters:

\verbatim
yarpdev --device fakeFrameGrabber --width 640 --height 480
\endverbatim

The special parameter "--help" will show all the available parameters for
that specific device.

You can check the documentation of that device (list of all devices \ref dev_impl here).
Or When you try to run
"yarpdev --device yourdevice"
and add the "--help" flag, it will tell you what options it is
checking, and any documentation present for those options.

\verbatim
yarpdev --device fakeFrameGrabber --help
\endverbatim



You can also write the parameters in a .ini file a load it from command line.
For example, you create a `grabber_test.ini` file with the following text:

\verbatim
device frameGrabber_nws_yarp
subdevice fakeFrameGrabber
name /test
width 640
height 480
\endverbatim

and launch the device with:

\verbatim
yarpdev --file grabber_test.ini
\endverbatim

## Running a Device via Yarprobotinterface

The commandline executable \link yarprobotinterface yarprobotinterface\endlink provides a more advanced way to open
one or more devices simultaneously (or in a specific order), and to attach them each other so that they can
exchange data. Additional information is provided in yarprobotinterface documentation page.

## Running a Device via programming language

A user application can easily open a device in c++ by instantiating a
`yarp::dev::PolyDriver` object and passing to it the required parameters
via a `yarp::os::Property`.

\code{.cpp}
yarp::os::Property p;
p.fromConfigFile("grabber_test.ini");
// of course you could construct the Property object on-the-fly
yarp::dev::PolyDriver dev;
dev.open(p);
if (!dev.isValid()) {return;}
yarp::dev::IGrabberInterface* igrab= nullptr;
dev.view(igrab);
//do something with igrab interface...
dev.close();
\endcode

Other programming languages (e.g. python) are available through \link yarp_swig yarp bindings\endlink.
\code{.py}
driver = yarp.PolyDriver()

options = yarp.Property()
options.put("robot", "icub")
options.put("device", "remote_controlboard")
options.put("remote", "/icub/left_arm")

driver.open(options)
if not driver.isValid():
    print('Cannot open the driver!')
    sys.exit()

ienc = driver.viewIEncoders()
//do something with ienc interface...
driver.close()
\endcode

*/


/**
\ingroup dev_all

\defgroup dev_class Device Creation/Configuration

Basic classes and methods related to creating and configuring
devices, and network communication to and from devices.

*/


/**
\ingroup dev_all

\defgroup dev_impl Device Implementations

Concrete device drivers that implement sets of interfaces.

*/


/**
\ingroup dev_impl

\defgroup dev_impl_wrapper Network Servers (Wrappers - pre NWC/NWS architecture)

These devices take implementations of existing interfaces and wrap them
up to work across the network.

*/

/**
\ingroup dev_impl

\defgroup dev_impl_network_clients Network Clients (Clients - pre NWC/NWS architecture)

These devices are meant to communicate to YARP ports opened by \ref dev_impl_wrapper
to provide device interfaces in a transparent way over a YARP network.

*/

/**
\ingroup dev_impl

\defgroup dev_impl_nws_yarp YARP Network Wrapper Servers (NWS)

These devices take implementations of existing interfaces and wrap them
up to work across the YARP network (see \ref nws_and_nwc_architecture).

*/

/**
\ingroup dev_impl

\defgroup dev_impl_nws_ros2 ROS2 Network Wrapper Servers (NWS)

These devices take implementations of existing interfaces and wrap them
up to work across the ROS2 network (see \ref nws_and_nwc_architecture).

*/

/**
\ingroup dev_impl

\defgroup dev_impl_nwc_yarp YARP Network Wrapper Clients (NWC)

These devices connects to their NWS counterpart through YARP network and expose a yarp::dev interface
(see \ref nws_and_nwc_architecture).

*/

/**
\ingroup dev_impl

\defgroup dev_impl_nwc_ros2 ROS2 Network Wrapper Clients (NWC)

These devices connects to ROS2 network and expose a yarp::dev interface
(see \ref nws_and_nwc_architecture).

*/




/**
\ingroup dev_impl

\defgroup dev_impl_remappers Remappers

These devices are meant expose a group of existing devices as a unique device,
or to expose a subset of the resourses exposed by a device as an independent device.

*/


/**
\ingroup dev_impl

\defgroup dev_impl_motor Motor Devices

These are devices useful for controlling motors.  They
implement interfaces like yarp::dev::IPositionControl
etc.

*/


/**
\ingroup dev_impl

\defgroup dev_impl_media Media Devices

These are devices useful for getting images and sound.  They
implement interfaces like yarp::dev::IFrameGrabberImage,
yarp::dev::IAudioGrabberSound, etc.

*/


/**
\ingroup dev_impl

\defgroup dev_impl_analog_sensors Analog Sensors

These are devices that expose sensor that can be efficiently expressed as vector of
real numbers, so-called "analog" sensors, such as gyroscope, accelerometers, force-torque sensors.
*/


/**
\ingroup dev_impl

\defgroup dev_impl_lidar Lidar Devices

Lidars and similar range measurement devices.
*/


/**
\ingroup dev_impl

\defgroup dev_impl_navigation Navigation Devices

Virtual devices to perform navigation tasks.
*/


/**
\ingroup dev_impl

\defgroup dev_impl_fake Fake/test Devices

Devices using for testing purposes.
*/


/**
\ingroup dev_impl

\defgroup dev_impl_other Other Device Implementations

Miscellaneous device implementations.
*/

/**
\ingroup dev_impl

\defgroup dev_impl_deprecated Obsolete or deprecated devices

Devices marked for deprecation in the upcoming Yarp releases
*/

/**
\ingroup dev_all

\defgroup dev_tutorials Tutorials and Examples about Devices

Tutorials and Examples about Devices.

*/
