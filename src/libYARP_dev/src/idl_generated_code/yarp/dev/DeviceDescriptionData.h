/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_DEVICEDESCRIPTIONDATA_H
#define YARP_THRIFT_GENERATOR_STRUCT_DEVICEDESCRIPTIONDATA_H

#include <yarp/dev/api.h>

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace yarp::dev {

class YARP_dev_API DeviceDescriptionData :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    /**
     * name of the device
     */
    std::string device_name{};
    /**
     * type of the device
     */
    std::string device_type{};
    /**
     * configuration parameters of the device
     */
    std::string device_configuration{};
    /**
     * user defined extra information
     */
    std::string device_extra_info{};

    // Default constructor
    DeviceDescriptionData() = default;

    // Constructor with field values
    DeviceDescriptionData(const std::string& device_name,
                          const std::string& device_type,
                          const std::string& device_configuration,
                          const std::string& device_extra_info);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<DeviceDescriptionData> unwrapped;

private:
    // read/write device_name field
    bool read_device_name(yarp::os::idl::WireReader& reader);
    bool write_device_name(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_device_name(yarp::os::idl::WireReader& reader);
    bool nested_write_device_name(const yarp::os::idl::WireWriter& writer) const;

    // read/write device_type field
    bool read_device_type(yarp::os::idl::WireReader& reader);
    bool write_device_type(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_device_type(yarp::os::idl::WireReader& reader);
    bool nested_write_device_type(const yarp::os::idl::WireWriter& writer) const;

    // read/write device_configuration field
    bool read_device_configuration(yarp::os::idl::WireReader& reader);
    bool write_device_configuration(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_device_configuration(yarp::os::idl::WireReader& reader);
    bool nested_write_device_configuration(const yarp::os::idl::WireWriter& writer) const;

    // read/write device_extra_info field
    bool read_device_extra_info(yarp::os::idl::WireReader& reader);
    bool write_device_extra_info(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_device_extra_info(yarp::os::idl::WireReader& reader);
    bool nested_write_device_extra_info(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace yarp::dev

#endif // YARP_THRIFT_GENERATOR_STRUCT_DEVICEDESCRIPTIONDATA_H
