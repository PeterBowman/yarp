/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu May 22 11:32:44 2025


#include "RGBDSensorClient_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(RGBDSensorClientParamsCOMPONENT, "yarp.device.RGBDSensorClient")
}


RGBDSensorClient_ParamsParser::RGBDSensorClient_ParamsParser()
{
}


std::vector<std::string> RGBDSensorClient_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("period");
    params.push_back("localImagePort");
    params.push_back("localDepthPort");
    params.push_back("remoteImagePort");
    params.push_back("remoteDepthPort");
    params.push_back("localRpcPort");
    params.push_back("remoteRpcPort");
    params.push_back("ImageCarrier");
    params.push_back("DepthCarrier");
    return params;
}


bool RGBDSensorClient_ParamsParser::getParamValue(const std::string& paramName, std::string& paramValue) const
{
    if (paramName =="period")
    {
        paramValue = std::to_string(m_period);
        return true;
    }
    if (paramName =="localImagePort")
    {
        paramValue = m_localImagePort;
        return true;
    }
    if (paramName =="localDepthPort")
    {
        paramValue = m_localDepthPort;
        return true;
    }
    if (paramName =="remoteImagePort")
    {
        paramValue = m_remoteImagePort;
        return true;
    }
    if (paramName =="remoteDepthPort")
    {
        paramValue = m_remoteDepthPort;
        return true;
    }
    if (paramName =="localRpcPort")
    {
        paramValue = m_localRpcPort;
        return true;
    }
    if (paramName =="remoteRpcPort")
    {
        paramValue = m_remoteRpcPort;
        return true;
    }
    if (paramName =="ImageCarrier")
    {
        paramValue = m_ImageCarrier;
        return true;
    }
    if (paramName =="DepthCarrier")
    {
        paramValue = m_DepthCarrier;
        return true;
    }

    yError() <<"parameter '" << paramName << "' was not found";
    return false;

}


std::string RGBDSensorClient_ParamsParser::getConfiguration() const
{
    //This is a sub-optimal solution.
    //Ideally getConfiguration() should return all parameters but it is currently
    //returning only user provided parameters (excluding default values)
    //This behaviour will be fixed in the near future.
    std::string s_cfg = m_provided_configuration;
    return s_cfg;
}

bool      RGBDSensorClient_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(RGBDSensorClientParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    m_provided_configuration = config.toString();
    yarp::os::Property prop_check(m_provided_configuration.c_str());
    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asFloat64();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'period' using DEFAULT value:" << m_period;
        }
        prop_check.unput("period");
    }

    //Parser of parameter localImagePort
    {
        if (config.check("localImagePort"))
        {
            m_localImagePort = config.find("localImagePort").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'localImagePort' using value:" << m_localImagePort;
        }
        else
        {
            yCError(RGBDSensorClientParamsCOMPONENT) << "Mandatory parameter 'localImagePort' not found!";
            yCError(RGBDSensorClientParamsCOMPONENT) << "Description of the parameter: Full name of the local image streaming port to open";
            return false;
        }
        prop_check.unput("localImagePort");
    }

    //Parser of parameter localDepthPort
    {
        if (config.check("localDepthPort"))
        {
            m_localDepthPort = config.find("localDepthPort").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'localDepthPort' using value:" << m_localDepthPort;
        }
        else
        {
            yCError(RGBDSensorClientParamsCOMPONENT) << "Mandatory parameter 'localDepthPort' not found!";
            yCError(RGBDSensorClientParamsCOMPONENT) << "Description of the parameter: Full name of the local depth streaming port to open";
            return false;
        }
        prop_check.unput("localDepthPort");
    }

    //Parser of parameter remoteImagePort
    {
        if (config.check("remoteImagePort"))
        {
            m_remoteImagePort = config.find("remoteImagePort").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'remoteImagePort' using value:" << m_remoteImagePort;
        }
        else
        {
            yCError(RGBDSensorClientParamsCOMPONENT) << "Mandatory parameter 'remoteImagePort' not found!";
            yCError(RGBDSensorClientParamsCOMPONENT) << "Description of the parameter: Full name of the remote image port to connect to";
            return false;
        }
        prop_check.unput("remoteImagePort");
    }

    //Parser of parameter remoteDepthPort
    {
        if (config.check("remoteDepthPort"))
        {
            m_remoteDepthPort = config.find("remoteDepthPort").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'remoteDepthPort' using value:" << m_remoteDepthPort;
        }
        else
        {
            yCError(RGBDSensorClientParamsCOMPONENT) << "Mandatory parameter 'remoteDepthPort' not found!";
            yCError(RGBDSensorClientParamsCOMPONENT) << "Description of the parameter: Full name of the remote depth port to connect to";
            return false;
        }
        prop_check.unput("remoteDepthPort");
    }

    //Parser of parameter localRpcPort
    {
        if (config.check("localRpcPort"))
        {
            m_localRpcPort = config.find("localRpcPort").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'localRpcPort' using value:" << m_localRpcPort;
        }
        else
        {
            yCError(RGBDSensorClientParamsCOMPONENT) << "Mandatory parameter 'localRpcPort' not found!";
            yCError(RGBDSensorClientParamsCOMPONENT) << "Description of the parameter: Full name of the local rpc port to open";
            return false;
        }
        prop_check.unput("localRpcPort");
    }

    //Parser of parameter remoteRpcPort
    {
        if (config.check("remoteRpcPort"))
        {
            m_remoteRpcPort = config.find("remoteRpcPort").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'remoteRpcPort' using value:" << m_remoteRpcPort;
        }
        else
        {
            yCError(RGBDSensorClientParamsCOMPONENT) << "Mandatory parameter 'remoteRpcPort' not found!";
            yCError(RGBDSensorClientParamsCOMPONENT) << "Description of the parameter: Full name of the remote rpc port to connect to";
            return false;
        }
        prop_check.unput("remoteRpcPort");
    }

    //Parser of parameter ImageCarrier
    {
        if (config.check("ImageCarrier"))
        {
            m_ImageCarrier = config.find("ImageCarrier").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'ImageCarrier' using value:" << m_ImageCarrier;
        }
        else
        {
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'ImageCarrier' using DEFAULT value:" << m_ImageCarrier;
        }
        prop_check.unput("ImageCarrier");
    }

    //Parser of parameter DepthCarrier
    {
        if (config.check("DepthCarrier"))
        {
            m_DepthCarrier = config.find("DepthCarrier").asString();
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'DepthCarrier' using value:" << m_DepthCarrier;
        }
        else
        {
            yCInfo(RGBDSensorClientParamsCOMPONENT) << "Parameter 'DepthCarrier' using DEFAULT value:" << m_DepthCarrier;
        }
        prop_check.unput("DepthCarrier");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(RGBDSensorClientParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(RGBDSensorClientParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      RGBDSensorClient_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: RGBDSensorClient\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'period': refresh period (in s) of the broadcasted values through yarp ports\n");
    doc = doc + std::string("'localImagePort': Full name of the local image streaming port to open\n");
    doc = doc + std::string("'localDepthPort': Full name of the local depth streaming port to open\n");
    doc = doc + std::string("'remoteImagePort': Full name of the remote image port to connect to\n");
    doc = doc + std::string("'remoteDepthPort': Full name of the remote depth port to connect to\n");
    doc = doc + std::string("'localRpcPort': Full name of the local rpc port to open\n");
    doc = doc + std::string("'remoteRpcPort': Full name of the remote rpc port to connect to\n");
    doc = doc + std::string("'ImageCarrier': Carrier for the image stream\n");
    doc = doc + std::string("'DepthCarrier': Carrier for the depth stream\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device RGBDSensorClient --period 0.03 --localImagePort /RGBD_nwc/Image:o --localDepthPort /RGBD_nwc/Depth:o --remoteImagePort /RGBD_nws/Image:o --remoteDepthPort /RGBD_nws/Depth:i --localRpcPort /RGBD_nwc/rpc:o --remoteRpcPort /RGBD_nws/rpc:i --ImageCarrier udp --DepthCarrier udp\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device RGBDSensorClient --localImagePort /RGBD_nwc/Image:o --localDepthPort /RGBD_nwc/Depth:o --remoteImagePort /RGBD_nws/Image:o --remoteDepthPort /RGBD_nws/Depth:i --localRpcPort /RGBD_nwc/rpc:o --remoteRpcPort /RGBD_nws/rpc:i\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
