/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu May 22 20:45:27 2025


#include "OpenCVWriter_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(OpenCVWriterParamsCOMPONENT, "yarp.device.OpenCVWriter")
}


OpenCVWriter_ParamsParser::OpenCVWriter_ParamsParser()
{
}


std::vector<std::string> OpenCVWriter_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("filename");
    params.push_back("framerate");
    params.push_back("width");
    params.push_back("height");
    return params;
}


bool OpenCVWriter_ParamsParser::getParamValue(const std::string& paramName, std::string& paramValue) const
{
    if (paramName =="filename")
    {
        paramValue = m_filename;
        return true;
    }
    if (paramName =="framerate")
    {
        paramValue = std::to_string(m_framerate);
        return true;
    }
    if (paramName =="width")
    {
        paramValue = std::to_string(m_width);
        return true;
    }
    if (paramName =="height")
    {
        paramValue = std::to_string(m_height);
        return true;
    }

    yError() <<"parameter '" << paramName << "' was not found";
    return false;

}


std::string OpenCVWriter_ParamsParser::getConfiguration() const
{
    //This is a sub-optimal solution.
    //Ideally getConfiguration() should return all parameters but it is currently
    //returning only user provided parameters (excluding default values)
    //This behaviour will be fixed in the near future.
    std::string s_cfg = m_provided_configuration;
    return s_cfg;
}

bool      OpenCVWriter_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(OpenCVWriterParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    m_provided_configuration = config.toString();
    yarp::os::Property prop_check(m_provided_configuration.c_str());
    //Parser of parameter filename
    {
        if (config.check("filename"))
        {
            m_filename = config.find("filename").asString();
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'filename' using value:" << m_filename;
        }
        else
        {
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'filename' using DEFAULT value:" << m_filename;
        }
        prop_check.unput("filename");
    }

    //Parser of parameter framerate
    {
        if (config.check("framerate"))
        {
            m_framerate = config.find("framerate").asFloat64();
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'framerate' using value:" << m_framerate;
        }
        else
        {
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'framerate' using DEFAULT value:" << m_framerate;
        }
        prop_check.unput("framerate");
    }

    //Parser of parameter width
    {
        if (config.check("width"))
        {
            m_width = config.find("width").asInt64();
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'width' using value:" << m_width;
        }
        else
        {
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'width' using DEFAULT value:" << m_width;
        }
        prop_check.unput("width");
    }

    //Parser of parameter height
    {
        if (config.check("height"))
        {
            m_height = config.find("height").asInt64();
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'height' using value:" << m_height;
        }
        else
        {
            yCInfo(OpenCVWriterParamsCOMPONENT) << "Parameter 'height' using DEFAULT value:" << m_height;
        }
        prop_check.unput("height");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(OpenCVWriterParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(OpenCVWriterParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      OpenCVWriter_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: OpenCVWriter\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'filename': output file name\n");
    doc = doc + std::string("'framerate': framerate for the output file\n");
    doc = doc + std::string("'width': frame width\n");
    doc = doc + std::string("'height': frame height\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device openCVWriter --filename output.avi --framerate 30 --width 0 --height 0\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device openCVWriter\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
